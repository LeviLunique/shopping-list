name: Main Build, Test, Dockerize and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-dockerize-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.POSTGRES_USER }}" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker image
      run: |
        docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/shopping-list-backend:latest -f backend/Dockerfile .

    - name: Build and push frontend Docker image
      run: |
        docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/shopping-list-frontend:latest -f frontend/Dockerfile .

    - name: Run Docker Compose for tests
      env:
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        docker-compose up -d
        docker-compose exec backend npx prisma migrate dev --name init --skip-seed
        docker-compose exec backend npm test

    - name: Deploy to Production
      run: |
        echo "Deploying to production..."
